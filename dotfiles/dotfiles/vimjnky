"   VIMRC form the Adrnlnjnky


"     EDITING STUFF
set listchars=tab:→\ ,eol:↲,nbsp:␣,space:·,trail:·,extends:⟩,precedes:⟨
set nogdefault  " this affects search :s///g (subst. all)
set js " this inserts 2 spaces at end of sentence
set showmatch
" set nowrap
set linebreak
" set paste       " for importing
" set cursorbind
" set debug=msg
filetype plugin on      " allow sensing the filetype
syntax enable
"  
"    C PROGRAMING 
" set cindent
" set cirkeys


"   COLORS
set background=dark
colorscheme adrnln1

" NUMBERS
set number
" set norelativenumber
set ruler
set textwidth=76 
set laststatus=0   
set icon

" TABS 
set expandtab
" set tabstop=2
" set softtabstop=4
set smarttab
set shiftwidth=4

" INDENT
set autoindent
set smartindent
set breakindent
" set breakindentopt=minshift
set indentexpr=lispindent()
set lisp  
" set indentkeys= list of keys that automatically indent

"   SWAPPING & BACKUP 
set nobackup
set noswapfile
set nowritebackup
set confirm

"    CURSOR
" set cursorcolumn
set cursorline
" set previewpopup
set scrolloff=999

"    SEARCH
set ignorecase
set infercase
set smartcase
set incsearch
set hlsearch            
" set wildchar=F
" set wildcharm
" set wildignore=""
" set wildmenu
" set wildmode=list:lastused

" SPELLING
set spell
set dictionary="/usr/share/words"
set spelllang="en_us"
" set spellcapcheck[.?!]
set spellsuggest=double
" set thesaurus "https://github.com/vim/vim/issues/629#issuecomment-443293282"
" set spellbadword()

" AUTCOMPLETE
set omnifunc=syntaxcomplete#Complete      " enable omni-completion
set complete=".,w,b,u,U,k,kspell,k{dict},s,s{tsr},-,t,i"
set completeopt="popup"
" set completepopup

" MISC 
set viminfo='20,<1000,s1000     " prevents truncated yanks, deletes, etc.
set nocompatible
set title
set toolbar=icons,text
set visualbell
let g:loaded_matchparen=1
set foldmethod=manual
set formatoptions-=B   " don't add space between two multi-byte chars in join 
set formatoptions+=2   " don't break a line after a one-letter word
set hidden 
set buflisted
set history=100     " command history
set loadplugins
set modelines=10
set opendevice
" set verbose=1
" set verbosefile"/tmp/vim.out"
set rtp^=~/.vimpersonal
" set rtp^=~/.vimprivate

" AUTOCMD
autocmd vimleavepre *.md !perl -p -i -e 's,\[([^\]]+?)\]\(\),[\1](https://duck.com/lite?q=\1),g' %      " fill in empty markdown links with duck.com search


"  IF STATMENTS

if empty(glob('~/.vim/autoload/plug.vim'))      " Install vim-plug if not already installed
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall
endif

if filereadable(expand("~/.vim/autoload/plug.vim"))     " only load plugins if Plug detected
  call plug#begin('~/.vimplugins')
  Plug 'vim-pandoc/vim-pandoc'
  Plug 'https://gitlab.com/rwxrob/vim-pandoc-syntax-simple'
  Plug 'cespare/vim-toml'
  Plug 'fatih/vim-go'
  Plug 'airblade/vim-gitgutter'
  Plug 'PProvost/vim-ps1'
  "Plug 'morhetz/gruvbox'
  call plug#end()
  let g:go_fmt_fail_silently = 0 " let me out even with errors
  let g:go_fmt_command = 'goimports' " autoupdate import
  let g:go_fmt_autosave = 1
else
  autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

if $PLATFORM == 'mac'           " requires PLATFORM env variable set (in ~/.bashrc)
  " required for mac delete to work
  set backspace=indent,eol,start
endif



" FILE TYPE RECONGNITION  
au bufnewfile,bufRead *.bash* set ft=sh
au bufnewfile,bufRead *.profile set filetype=sh
au bufnewfile,bufRead *.crontab set filetype=crontab
au bufnewfile,bufRead *ssh/config set filetype=sshconfig
au bufnewfile,bufRead *gitconfig set filetype=gitconfig
au bufnewfile,bufRead /tmp/psql.edit.* set syntax=sql
au bufnewfile,bufRead *jnky set ft=sh
au bufnewfile,bufRead bashjnky set filetype=sh
au bufnewfile,bufRead vimjnky set filetype=sh
au bufnewfile,bufRead tmuxjnky set filetype=sh

" start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif


" FUNCTIONS


" #evening murphey desert koehler ron slate torte zellner

function! <SID>SynStack()                                   " displays all the syntax rules for current position, useful
	if !exists("*synstack")
		return
	endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc  

" PRINTING
" printer control settings
" set printdevice"" 
" set printencoding""
" set printexpr     " this is for printing PostScript information
" set printfont"" 
" set printheader"" " this is how to set the Header Formating
" set printoptions""      " see popt-option
" 

" set formatoptions-=t   " don't auto-wrap text using text width
" set formatoptions+=c   " autowrap comments using textwidth with leader
" set formatoptions-=r   " don't auto-insert comment leader on enter in insert
" set formatoptions-=o   " don't auto-insert comment leader on o/O in normal
" set formatoptions+=q   " allow formatting of comments with gq
" set formatoptions-=w   " don't use trailing whitespace for paragraphs
" set formatoptions-=a   " disable auto-formatting of paragraph changes
" set formatoptions-=n   " don't recognized numbered lists
set formatoptions+=j   " delete comment prefix when joining
" set formatoptions-=2   " don't use the indent of second paragraph line
" set formatoptions-=v   " don't use broken 'vi-compatible auto-wrapping'
" set formatoptions-=b   " don't use broken 'vi-compatible auto-wrapping'
" set formatoptions+=l   " long lines not broken in insert mode
" set formatoptions+=m   " multi-byte character line break support
" set formatoptions+=M   " don't add space before or after multi-byte char


" MAPPING

map <F1> :set number!<CR> :set relativenumber!<CR>
nmap <F2> :call <SID>SynStack()<CR>
set pastetoggle=<F3>
map <F4> :set list!<CR>
map <F5> :set cursorline!<CR>
map <F7> :set spell!<CR>
map <F12> :set fdm=indent<CR>

" disable arrow keys (vi muscle memory)
noremap <up> :echoerr "Yeah that key doesn't do that"<CR>
noremap <down> :echoerr "Hey try the HOME ROW"<CR>
noremap <left> :echoerr "Are you STILL USING ARROWS"<CR>
noremap <right> :echoerr "
inoremap <up> <NOP>
inoremap <down> <NOP>
inoremap <left> <NOP>
inoremap <right> <NOP>

" pane switching vi style (duh)
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
